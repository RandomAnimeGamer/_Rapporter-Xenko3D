// Copyright (c) 2014 Silicon Studio Corp. (http://siliconstudio.co.jp)
// This file is distributed under GPL v3. See LICENSE.md for details.
/// <summary>
/// Performs minmax calculation from an input texture.
/// </summary>
/// <remarks>
/// MINMAX_COUNT_X: generic int - number of column of texels to minmax.
/// MINMAX_COUNT_Y: generic int - number of row of texels to minmax.
/// MINMAX_MIN_DEFAULT: generic float - default initial value for min.
/// MINMAX_MAX_DEFAULT: generic float - default initial value for max.
/// </remarks>
shader PostEffectMinMax : ImageEffectShader
{
    stage float4 MinMaxCoords = float4(0.0f, 0.0f, 1.0f, 1.0f);

    stage override float4 Shading()
    {
        float value;
        float2 minmax = float2(1.0f, 0.0f);

        float2 texc = lerp(MinMaxCoords.xy, MinMaxCoords.zw, streams.TexCoord);

        [unroll]
        for(int i = 0; i < 4; i+=2)
        {
            [unroll]
            for(int j = 0; j < 4; j+=2) 
            {
                // Leverage on cache by sampling 2x2
                // Sample texel on 1st row

                // TODO: THIS COULD BE OPTIMIZED with Gather instruction only for 4.1+ SM profile
                value = Texture0.SampleLevel(PointSampler, texc, 0.0, int2(j,i)).x;
                minmax = float2(min(minmax.x, value), max(minmax.y, value));
                value = Texture0.SampleLevel(PointSampler, texc, 0.0, int2(j+1,i)).x;
                minmax = float2(min(minmax.x, value), max(minmax.y, value));

                // Sample texel on 2nd row
                value = Texture0.SampleLevel(PointSampler, texc, 0.0, int2(j,i+1)).x;
                minmax = float2(min(minmax.x, value), max(minmax.y, value));
                value = Texture0.SampleLevel(PointSampler, texc, 0.0, int2(j+1,i+1)).x;
                minmax = float2(min(minmax.x, value), max(minmax.y, value));
            }
        }

        return float4(minmax, 0.0, 1.0);
    }
};
